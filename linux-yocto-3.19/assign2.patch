From 6e64485efc30ef2607f20b1c5ea58055b47971b8 Mon Sep 17 00:00:00 2001
From: Jacob Mahugh <mahughj@oregonstate.edu>
Date: Fri, 27 Oct 2017 10:52:56 -0700
Subject: [PATCH 1/3] Added intial sstf-iosched.c as cp of noop

---
 linux-yocto-3.19/block/sstf-iosched.c | 124 ++++++++++++++++++++++++++++++++++
 1 file changed, 124 insertions(+)
 create mode 100644 linux-yocto-3.19/block/sstf-iosched.c

diff --git a/linux-yocto-3.19/block/sstf-iosched.c b/linux-yocto-3.19/block/sstf-iosched.c
new file mode 100644
index 0000000..3de89d4
--- /dev/null
+++ b/linux-yocto-3.19/block/sstf-iosched.c
@@ -0,0 +1,124 @@
+/*
+ * elevator noop
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+struct noop_data {
+	struct list_head queue;
+};
+
+static void noop_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+
+static int noop_dispatch(struct request_queue *q, int force)
+{
+	struct noop_data *nd = q->elevator->elevator_data;
+
+	if (!list_empty(&nd->queue)) {
+		struct request *rq;
+		rq = list_entry(nd->queue.next, struct request, queuelist);
+		list_del_init(&rq->queuelist);
+		elv_dispatch_sort(q, rq);
+		return 1;
+	}
+	return 0;
+}
+
+static void noop_add_request(struct request_queue *q, struct request *rq)
+{
+	struct noop_data *nd = q->elevator->elevator_data;
+
+	list_add_tail(&rq->queuelist, &nd->queue);
+}
+
+static struct request *
+noop_former_request(struct request_queue *q, struct request *rq)
+{
+	struct noop_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+noop_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct noop_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int noop_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct noop_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+static void noop_exit_queue(struct elevator_queue *e)
+{
+	struct noop_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_noop = {
+	.ops = {
+		.elevator_merge_req_fn		= noop_merged_requests,
+		.elevator_dispatch_fn		= noop_dispatch,
+		.elevator_add_req_fn		= noop_add_request,
+		.elevator_former_req_fn		= noop_former_request,
+		.elevator_latter_req_fn		= noop_latter_request,
+		.elevator_init_fn		= noop_init_queue,
+		.elevator_exit_fn		= noop_exit_queue,
+	},
+	.elevator_name = "noop",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init noop_init(void)
+{
+	return elv_register(&elevator_noop);
+}
+
+static void __exit noop_exit(void)
+{
+	elv_unregister(&elevator_noop);
+}
+
+module_init(noop_init);
+module_exit(noop_exit);
+
+
+MODULE_AUTHOR("Jens Axboe");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("No-op IO scheduler");
-- 
1.8.3.1


From b4552cff631aeebe7cff247b88928565d5dcfd01 Mon Sep 17 00:00:00 2001
From: aoleson <alannah313@gmail.com>
Date: Mon, 30 Oct 2017 16:28:35 -0700
Subject: [PATCH 2/3] Tested working sstf files. Need to clean up kprints
 though

---
 linux-yocto-3.19/block/Kconfig.iosched | 13 ++++++
 linux-yocto-3.19/block/Makefile        |  1 +
 linux-yocto-3.19/block/sstf-iosched.c  | 72 +++++++++++++++++++---------------
 3 files changed, 55 insertions(+), 31 deletions(-)

diff --git a/linux-yocto-3.19/block/Kconfig.iosched b/linux-yocto-3.19/block/Kconfig.iosched
index 421bef9..28736c7 100644
--- a/linux-yocto-3.19/block/Kconfig.iosched
+++ b/linux-yocto-3.19/block/Kconfig.iosched
@@ -32,6 +32,15 @@ config IOSCHED_CFQ
 
 	  This is the default I/O scheduler.
 
+config IOSCHED_SSTF
+	tristate "SSTF I/O scheduler"
+	default y
+	---help---
+		Help is for 
+		the
+		weak,
+		fool!
+
 config CFQ_GROUP_IOSCHED
 	bool "CFQ Group Scheduling support"
 	depends on IOSCHED_CFQ && BLK_CGROUP
@@ -54,6 +63,9 @@ choice
 
 	config DEFAULT_NOOP
 		bool "No-op"
+	
+	config DEFAULT_SSTF
+		bool "SSTF" if IOSCHED_SSTF=y
 
 endchoice
 
@@ -62,6 +74,7 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "sstf" if DEFAULT_SSTF
 
 endmenu
 
diff --git a/linux-yocto-3.19/block/Makefile b/linux-yocto-3.19/block/Makefile
index 00ecc97..427e2ea 100644
--- a/linux-yocto-3.19/block/Makefile
+++ b/linux-yocto-3.19/block/Makefile
@@ -18,6 +18,7 @@ obj-$(CONFIG_BLK_DEV_THROTTLING)	+= blk-throttle.o
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
+obj-$(CONFIG_IOSCHED_SSTF) += sstf-iosched.o
 
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_CMDLINE_PARSER)	+= cmdline-parser.o
diff --git a/linux-yocto-3.19/block/sstf-iosched.c b/linux-yocto-3.19/block/sstf-iosched.c
index 3de89d4..433e23d 100644
--- a/linux-yocto-3.19/block/sstf-iosched.c
+++ b/linux-yocto-3.19/block/sstf-iosched.c
@@ -1,5 +1,5 @@
 /*
- * elevator noop
+ * elevator sstf
  */
 #include <linux/blkdev.h>
 #include <linux/elevator.h>
@@ -8,41 +8,51 @@
 #include <linux/slab.h>
 #include <linux/init.h>
 
-struct noop_data {
+struct sstf_data {
 	struct list_head queue;
 };
 
-static void noop_merged_requests(struct request_queue *q, struct request *rq,
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
 				 struct request *next)
 {
 	list_del_init(&next->queuelist);
 }
 
-static int noop_dispatch(struct request_queue *q, int force)
+static int sstf_dispatch(struct request_queue *q, int force)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct sstf_data *nd = q->elevator->elevator_data;
 
 	if (!list_empty(&nd->queue)) {
 		struct request *rq;
 		rq = list_entry(nd->queue.next, struct request, queuelist);
 		list_del_init(&rq->queuelist);
 		elv_dispatch_sort(q, rq);
+		printk(KERN_DEBUG "[SSTF] Dispatching!\n");
 		return 1;
 	}
 	return 0;
 }
 
-static void noop_add_request(struct request_queue *q, struct request *rq)
+static void sstf_add_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct sstf_data *nd = q->elevator->elevator_data;
+	struct list_head *cur = NULL;
+
+	printk(KERN_DEBUG "[SSTF] Adding reuest!\n");
+	list_for_each(cur, &nd->queue) {
+		if (rq_end_sector ( list_entry(cur, struct request, queuelist)) > rq_end_sector(rq)) {
+			printk(KERN_DEBUG "[SSTF] Inserting!\n");
+			break;
+		}
+	}
 
 	list_add_tail(&rq->queuelist, &nd->queue);
 }
 
 static struct request *
-noop_former_request(struct request_queue *q, struct request *rq)
+sstf_former_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct sstf_data *nd = q->elevator->elevator_data;
 
 	if (rq->queuelist.prev == &nd->queue)
 		return NULL;
@@ -50,18 +60,18 @@ noop_former_request(struct request_queue *q, struct request *rq)
 }
 
 static struct request *
-noop_latter_request(struct request_queue *q, struct request *rq)
+sstf_latter_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct sstf_data *nd = q->elevator->elevator_data;
 
 	if (rq->queuelist.next == &nd->queue)
 		return NULL;
 	return list_entry(rq->queuelist.next, struct request, queuelist);
 }
 
-static int noop_init_queue(struct request_queue *q, struct elevator_type *e)
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
 {
-	struct noop_data *nd;
+	struct sstf_data *nd;
 	struct elevator_queue *eq;
 
 	eq = elevator_alloc(q, e);
@@ -83,42 +93,42 @@ static int noop_init_queue(struct request_queue *q, struct elevator_type *e)
 	return 0;
 }
 
-static void noop_exit_queue(struct elevator_queue *e)
+static void sstf_exit_queue(struct elevator_queue *e)
 {
-	struct noop_data *nd = e->elevator_data;
+	struct sstf_data *nd = e->elevator_data;
 
 	BUG_ON(!list_empty(&nd->queue));
 	kfree(nd);
 }
 
-static struct elevator_type elevator_noop = {
+static struct elevator_type elevator_sstf = {
 	.ops = {
-		.elevator_merge_req_fn		= noop_merged_requests,
-		.elevator_dispatch_fn		= noop_dispatch,
-		.elevator_add_req_fn		= noop_add_request,
-		.elevator_former_req_fn		= noop_former_request,
-		.elevator_latter_req_fn		= noop_latter_request,
-		.elevator_init_fn		= noop_init_queue,
-		.elevator_exit_fn		= noop_exit_queue,
+		.elevator_merge_req_fn		= sstf_merged_requests,
+		.elevator_dispatch_fn		= sstf_dispatch,
+		.elevator_add_req_fn		= sstf_add_request,
+		.elevator_former_req_fn		= sstf_former_request,
+		.elevator_latter_req_fn		= sstf_latter_request,
+		.elevator_init_fn		= sstf_init_queue,
+		.elevator_exit_fn		= sstf_exit_queue,
 	},
-	.elevator_name = "noop",
+	.elevator_name = "sstf",
 	.elevator_owner = THIS_MODULE,
 };
 
-static int __init noop_init(void)
+static int __init sstf_init(void)
 {
-	return elv_register(&elevator_noop);
+	return elv_register(&elevator_sstf);
 }
 
-static void __exit noop_exit(void)
+static void __exit sstf_exit(void)
 {
-	elv_unregister(&elevator_noop);
+	elv_unregister(&elevator_sstf);
 }
 
-module_init(noop_init);
-module_exit(noop_exit);
+module_init(sstf_init);
+module_exit(sstf_exit);
 
 
 MODULE_AUTHOR("Jens Axboe");
 MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("No-op IO scheduler");
+MODULE_DESCRIPTION("SSTF IO scheduler");
-- 
1.8.3.1


From 63aff2f837551dcb576b7d0dd262e0a953f17ed9 Mon Sep 17 00:00:00 2001
From: aoleson <alannah313@gmail.com>
Date: Mon, 30 Oct 2017 18:02:06 -0700
Subject: [PATCH 3/3] Cleaning up the kprint statements

---
 linux-yocto-3.19/block/sstf-iosched.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/linux-yocto-3.19/block/sstf-iosched.c b/linux-yocto-3.19/block/sstf-iosched.c
index 433e23d..56038ec 100644
--- a/linux-yocto-3.19/block/sstf-iosched.c
+++ b/linux-yocto-3.19/block/sstf-iosched.c
@@ -27,7 +27,7 @@ static int sstf_dispatch(struct request_queue *q, int force)
 		rq = list_entry(nd->queue.next, struct request, queuelist);
 		list_del_init(&rq->queuelist);
 		elv_dispatch_sort(q, rq);
-		printk(KERN_DEBUG "[SSTF] Dispatching!\n");
+		printk(KERN_DEBUG "[SSTF] Dispatching! Proc at position %lu\n", blk_rq_pos(rq));
 		return 1;
 	}
 	return 0;
@@ -38,10 +38,10 @@ static void sstf_add_request(struct request_queue *q, struct request *rq)
 	struct sstf_data *nd = q->elevator->elevator_data;
 	struct list_head *cur = NULL;
 
-	printk(KERN_DEBUG "[SSTF] Adding reuest!\n");
+	printk(KERN_DEBUG "[SSTF] Adding request! Proc at position %lu\n", blk_rq_pos(rq));
 	list_for_each(cur, &nd->queue) {
 		if (rq_end_sector ( list_entry(cur, struct request, queuelist)) > rq_end_sector(rq)) {
-			printk(KERN_DEBUG "[SSTF] Inserting!\n");
+			printk(KERN_DEBUG "[SSTF] Inserting! Proc at position %lu\n", blk_rq_pos(rq));
 			break;
 		}
 	}
@@ -129,6 +129,6 @@ module_init(sstf_init);
 module_exit(sstf_exit);
 
 
-MODULE_AUTHOR("Jens Axboe");
+MODULE_AUTHOR("Jacob Mahugh & Alannah Oleson");
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("SSTF IO scheduler");
-- 
1.8.3.1

